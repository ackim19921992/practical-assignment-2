 Task 1: Implementing Encapsulation
class Employee:
    def __init__(self, name, id, salary):
        self.__name = name
        self.__id = id
        self.__salary = salary

    def get_name(self):
        return self.__name

    def get_id(self):
        return self.__id

    def get_salary(self):
        return self.__salary

    def set_salary(self, salary):
        if salary < 0:
            raise ValueError("Salary cannot be negative")
        self.__salary = salary
# Task 2: Implementing Inheritance and Polymorphism
class Vehicle:
    def __init__(self, make, model):
        self.make = make
        self.model = model

    def start_engine(self):
        print(f"The {self.make} {self.model} engine is starting.")

class Car(Vehicle):
    def start_engine(self):
        super().start_engine()
        print("Vroom!")

class Truck(Vehicle):
    def start_engine(self):
        super().start_engine()
        print("GRRRRRRRRR!")

def start_any_vehicle(vehicle):
    vehicle.start_engine()
# Example usage
if __name__ == "__main__":
    # Task 1 example usage
    employee = Employee("John", 123, 50000)
    print(employee.get_name())
    employee.set_salary(60000)
    print(employee.get_salary())

    # Task 2 example usage
    car = Car("Toyota", "Camry")
    truck = Truck("Ford", "F-150")
    start_any_vehicle(car)
    start_any_vehicle(truck)
